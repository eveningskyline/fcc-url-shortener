 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var url = process.env.MONGOLAB_URI;
var validUrl = require('valid-url');
var mongoose = require('mongoose');
var base58 = require('./base58');
// grab the url model
var Url = require('./models/url');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/new')
    .get(function(req, res) {
  
  res.send(req.params.url);
  
    var longUrl = req.params.url
    var shortUrl = undefined
  
     if (validUrl.isUri(longUrl)){ 
       
        mongoose.connect(url);
       
        // check if url already exists in database
        Url.findOne({long_url: longUrl}, function (err, doc){
          if (doc){
            // base58 encode the unique _id of that document and construct the short URL
            shortUrl = process.env.MONGODB_WEBHOST + base58.encode(doc._id);

            // since the document exists, we return it without creating a new entry
            res.send({'shortUrl': shortUrl});
          } else {
            // The long URL was not found in the long_url field in our urls
            // collection, so we need to create a new entry:
            var newUrl = Url({
              long_url: longUrl
            });

            // save the new link
            newUrl.save(function(err) {
              if (err){
                console.log(err);
              }

              // construct the short URL
              shortUrl = process.env.MONGODB_WEBHOST + base58.encode(newUrl._id);

              res.send({'shortUrl': shortUrl});
            });
          }

        });
          
        
       
      } else {
        res.send('you call that a valid url?')
      }

    })


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});